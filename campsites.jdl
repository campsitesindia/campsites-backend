//rating table -- after listing we need to create rating
//featurs to Listing
//room to listing
//room photos
//bookings and rooms
application {
  config {
    baseName campsitesindia,
    applicationType monolith,
    packageName com.dd.campsites,
    authenticationType jwt,
    prodDatabaseType postgresql,
    clientFramework react
  }
  entities *
}

entity AuthenticatedUser {
 firstName String ,
 lastName String ,
 authTimestamp Instant
}



entity Post{
  content String,
  createdBy String,
  createdDate Instant,
  updatedBy Instant,
  updateDate Instant
}
entity Images{
  imageUrl String,
  createdBy String,
  createdDate Instant,
  updatedBy Instant,
  updateDate Instant
}
entity Comments{
  commentText String,
  createdBy String,
  createdDate Instant,
  updatedBy Instant,
  updateDate Instant
}

entity Location{
  title String,
  count Integer,
  thumbnail String,
  icon String,
  color String,
  imgIcon String,
  description String,
  taxonomy String,
  createdBy String,
  createdDate Instant,
  updatedBy Instant,
  updateDate Instant
}


entity Rating{
 value Double,
 name String
}
entity ListingType{
  title String,
  count Integer,
  thumbnail String,
  icon String,
  color String,
  imgIcon String,
  description String,
  taxonomy String,
  createdBy String,
  createdDate Instant,
  updatedBy Instant,
  updateDate Instant
}

entity Listing{
    address String,
    latitude Double,
    longitude Double,
    url String,
    title String,
    content String,
    thumbnail String,
    isFeatured Boolean,
    pricePerPerson Double,
	phone String,
	email  String,
	website String,
	comment TextBlob,
	disableBooking Boolean,
    viewCount  Integer,
    createdBy String,
    createdDate Instant,
    updatedBy Instant,
    updateDate Instant

}
entity Photos {

	alt String,
	caption String,
	description String,
	href  String,
	src  String,
	title  String,
    createdBy String,
  createdDate Instant,
  updatedBy Instant,
  updateDate Instant
}

entity Videos {
name String,
url String,
createdBy String,
  createdDate Instant,
  updatedBy Instant,
  updateDate Instant
}

entity Features{
  title String,
  count Integer,
  thumbnail String,
  icon String,
  color String,
  imgIcon String,
  description String,
  parent Integer,
  taxonomy String,
  createdBy String,
  createdDate Instant,
  updatedBy Instant,
  updateDate Instant
}



entity  Bookings {
  //id integer [primary key]
  //user_id integer
  //place_id integer
  name String,
  checkInDate Instant ,
  checkOutDate Instant,
  pricePerNight Double,
  numOfNights Integer,
  createdBy String,
  createdDate Instant,
  updatedBy Instant,
  updateDate Instant
}
enum InvoiceStatus{
 PAID,
 CANCELED,
 REFUNDED
}
entity Invoice {
  invoiceAmount Double,
  status InvoiceStatus,
  createdBy String,
  createdDate Instant,
  updatedBy Instant,
  updateDate Instant,
}

entity Room{
//roomType_id
	name String,
    roomNumber String,
    isSmoking String,
    status String,
    createdBy String,
  createdDate Instant,
  updatedBy Instant,
  updateDate Instant

    //roomType
}

entity RoomType{
    type String,
	description String,
    maxCapacity String,
    numberOfBeds Integer,
    numberOfBathrooms Integer,
    roomRatePerNight Double,
    createdBy String,
  createdDate Instant,
  updatedBy Instant,
  updateDate Instant
}


entity Review {

 // id integer [primary key]
 // booking_id integer
  rating Integer,
  reviewbBody TextBlob,
  createdBy String,
  createdDate Instant,
  updatedBy Instant,
  updateDate Instant

}


entity Like{
  createdBy String,
  createdDate Instant,
  updatedBy Instant,
  updateDate Instant
}


entity Followers{
  createdBy String,
  createdDate Instant,
  updatedBy Instant,
  updateDate Instant
}
entity FeaturesListing {

}
entity FeaturesInRoom {

}
entity RoomsForListing {

}
entity RoomsInBooking {

}
relationship OneToOne {
  AuthenticatedUser{user(email)} to User
  Like to Post
  Like {user(firstName)} to User
  Like to Images
  ListingType{Parent(title)} to ListingType
  Location{Parent(title)} to Location
  Rating  {listing(title)} to Listing


}



relationship ManyToOne {
Post{user(email)}  to User
Followers{followedBy(email)}  to User
Followers{user(email)}  to User
Images  to Post
Images{user(email)} to User
Comments to Post
Comments {user(email)} to User
Room {roomType} to RoomType
Bookings{user(email)} to User

Bookings {listing(title)}  to Listing
Review {listing(title)}  to Listing

Photos {listing(title)}  to Listing
Videos {listing(title)}  to Listing
Listing {location(title)} to Location

FeaturesListing {Listing(title)} to Listing
FeaturesListing {feature(title)} to Features
FeaturesInRoom {room(roomNumber)} to Room
FeaturesInRoom {feature(title)} to Features
RoomsForListing {Listing(title)} to Listing
RoomsForListing {room(roomNumber)} to Room
RoomsInBooking {Bookings(name)} to Bookings
RoomsInBooking {Room(roomNumber)} to Room
Review {booking(name)} to Bookings

Listing {Owner(email)} to User
Invoice to Bookings
Invoice{Customer(email)} to User
}





paginate * with pagination
filter *
service * with serviceClass
service all with serviceImpl
